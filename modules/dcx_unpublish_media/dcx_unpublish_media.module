<?php

/**
 * @file
 * Contains.
 */

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function dcx_unpublish_media_media_update($entity) {
  // Only care about media images.
  if ('image' !== $entity->bundle()) {
    return;
  }

  // Do not care about clones of media:images. Clones have a parent.
  if ($entity->field_parent_media && NULL !== $entity->field_parent_media->target_id) {
    return;
  }

  $mediaBundleStorage = \Drupal::entityTypeManager()
    ->getStorage('media_bundle');
  $bundle = $mediaBundleStorage->load($entity->bundle());
  $field = $bundle->get('type_configuration')['source_field'];

  /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $image */
  $image = $entity->$field->first();
  $file = file_load($image->target_id);

  if (!$entity->status->value && $entity->original->status->value) {
    $target_fileuri = str_replace('public://', 'private://', $file->getFileUri());
    // Remove everything after the last / and itself.
    $target_dir = preg_replace('#' . DIRECTORY_SEPARATOR . '[^' . DIRECTORY_SEPARATOR . ']+$#', '', $target_fileuri);
    if (!is_dir($target_dir)) {
      mkdir($target_dir);
    }

    // Do not care about image styles here. File move takes care of this by
    // invoking hook image_file_move().
    file_move($file, $target_fileuri);
  }
  elseif ($entity->status->value && !$entity->original->status->value) {
    $target_fileuri = str_replace('private://', 'public://', $file->getFileUri());
    // Remove everything after the last / and itself.
    $target_dir = preg_replace('#' . DIRECTORY_SEPARATOR . '[^' . DIRECTORY_SEPARATOR . ']+$#', '', $target_fileuri);
    if (!is_dir($target_dir)) {
      mkdir($target_dir);
    }
    file_move($file, $target_fileuri);

    /** @var \Drupal\Core\Cache\CacheTagsInvalidatorInterface $cache */
    $cache = \Drupal::service('cache_tags.invalidator');

    $setting = \Drupal::config('dcx_unpublish_media.unpublishmediasettings');

    $cache->invalidateTags(['media:' . $setting->get('default_image')]);
  }
}

/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter().
 */
function dcx_unpublish_media_media_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {

  $mediaBundleStorage = \Drupal::entityTypeManager()
    ->getStorage('media_bundle');
  $bundle = $mediaBundleStorage->load($entity->bundle());

  if ($bundle->get('type') == 'image' && !$entity->status->value) {

    $setting = \Drupal::config('dcx_unpublish_media.unpublishmediasettings');

    $mediaStorage = \Drupal::entityTypeManager()->getStorage('media');
    $media = $mediaStorage->load($setting->get('default_image'));

    if ($media) {
      $renderController = \Drupal::entityTypeManager()->getViewBuilder('media');
      $build = $renderController->view($media, $view_mode);
    }
    else {
      $build = [];
    }

  }
}
