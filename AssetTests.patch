diff --git a/src/Asset/BaseAsset.php b/src/Asset/BaseAsset.php
index f9bde98..985623d 100644
--- a/src/Asset/BaseAsset.php
+++ b/src/Asset/BaseAsset.php
@@ -31,7 +31,6 @@ abstract class BaseAsset {
     foreach ($mandatory_attributes as $attribute) {
       if (!isset($data[$attribute]) || empty($data[$attribute]) ) {
         $e = new MandatoryAttributeException($attribute);
-        watchdog_exception(__METHOD__, $e);
         throw $e;
       }
     }
@@ -39,8 +38,7 @@ abstract class BaseAsset {
     // Only allow mandatory and optional attributes.
     $unknown_attributes = array_diff(array_keys($data), array_merge($optional_attributes, $mandatory_attributes));
     if (!empty($unknown_attributes)) {
-      $e = new IllegalAttributeException($unknown_attributes);
-      watchdog_exception(__METHOD__, $e);
+      $e = new IllegalAttributeException(current($unknown_attributes));
       throw $e;
     }
 
diff --git a/src/JsonClient.php b/src/JsonClient.php
index c3f77c4..bad0f34 100644
--- a/src/JsonClient.php
+++ b/src/JsonClient.php
@@ -14,6 +14,7 @@ use Drupal\Core\Utility\Error;
 use Drupal\Core\Logger\RfcLogLevel;
 
 use Drupal\dcx_integration\Exception\DcxClientException;
+use Drupal\dcx_integration\Exception\UnknownDocumentTypeException;
 
 /**
  * Class Client.
@@ -202,7 +203,13 @@ class JsonClient implements ClientInterface {
 
     $data = $this->processAttributeMap($attribute_map, $json);
 
-    return new Image($data);
+    try {
+      $asset = new Image($data);
+    } catch(\Exception $e) {
+      $this->watchdog_exception(__METHOD__, $e);
+      throw $e;
+    }
+    return $asset;
   }
 
   /**
@@ -223,7 +230,14 @@ class JsonClient implements ClientInterface {
 
     $data = $this->processAttributeMap($attribute_map, $json);
 
-    return new Article($data);
+    try {
+      $asset = new Article($data);
+    } catch(\Exception $e) {
+      $this->watchdog_exception(__METHOD__, $e);
+      throw $e;
+    }
+    return $asset;
+
   }
 
   /**
@@ -306,6 +320,8 @@ class JsonClient implements ClientInterface {
    */
   protected function extractImageIds($json, $keys) {
     $data = $this->extractData($json, $keys);
+    if (!$data) return;
+
     foreach ($data as $image_data) {
       $images[] = $this->extractData($image_data, ['fields', 'DocumentRef', 0, '_id']);
     }
@@ -359,11 +375,11 @@ class JsonClient implements ClientInterface {
       $right_id = $right['_id'];
       $dereferenced_right_id = $json['_referenced']['dcx:rights'][$right_id]['properties']['topic_id']['_id'];
       if ('dcxapi:tm_topic/rightsusage-Online' == $dereferenced_right_id) {
-        if ($right['from_date'] && empty($right['to_date'])) {
+        if (isset($right['from_date']) && isset($right['to_date']) && empty($right['to_date'])) {
           $date = new \DateTime($right['from_date']);
           return $date->format('Y-m-d');
         }
-        if ($right['to_date']) {
+        if (isset($right['to_date'])) {
           $date = new \DateTime($right['to_date']);
           return $date->format('Y-m-d');
         }
@@ -729,5 +745,5 @@ class JsonClient implements ClientInterface {
     $this->logger->log($severity, $message, $variables);
   }
 
-  
+
 }
diff --git a/tests/src/Unit/AssetGenerationTest.php b/tests/src/Unit/AssetGenerationTest.php
new file mode 100644
index 0000000..25d7261
--- /dev/null
+++ b/tests/src/Unit/AssetGenerationTest.php
@@ -0,0 +1,79 @@
+<?php
+
+namespace Drupal\Tests\dcx_integration\Unit;
+
+use Drupal\dcx_integration\Asset\Image;
+use Drupal\dcx_integration\Asset\Article;
+use Drupal\dcx_integration\JsonClient;
+use Drupal\Tests\dcx_integration\DummyDcxApiClient;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * @group dcx
+ */
+class AssetGenerationTest extends UnitTestCase {
+  protected $client;
+
+  protected $api_client;
+
+  function setUp() {
+    $jsonclientsettings = ['publication' => 'dummy_publication'];
+    $config_factory = $this->getConfigFactoryStub(['dcx_integration.jsonclientsettings' => $jsonclientsettings]);
+    $user = $this->getMock('\Drupal\Core\Session\AccountProxyInterface');
+
+    $logger = $this->getMock('\Psr\Log\LoggerInterface');
+    $loggerFactory = $this->getMock('\Drupal\Core\Logger\LoggerChannelFactoryInterface');
+    $loggerFactory->expects($this->any())
+      ->method('get')
+      ->will($this->returnValue($logger));
+
+    $stringTranslation = $this->getStringTranslationStub();
+    $this->api_client = new DummyDcxApiClient();
+    $this->client = new JsonClient($config_factory, $user, $stringTranslation, $loggerFactory, $this->api_client);
+  }
+
+  function testGetObject__unknown_type() {
+    $this->api_client->expected_response_body = [
+      'fields' => ['Type' => [0 => ['_id' => 'unknown']]],
+    ];
+
+    $this->setExpectedException('Drupal\dcx_integration\Exception\UnknownDocumentTypeException', "DC-X object idOfUnknownType has unknown type 'unknown'.");
+    $this->client->getObject('idOfUnknownType');
+  }
+
+  function testGetObject__image() {
+    $this->api_client->expected_response_body = [
+      '_id' => 'document/xyz',
+      'fields' => [
+        'Type' => [0 => ['_id' => 'dcxapi:tm_topic/documenttype-image']],
+        'Filename' => [0 => ['value' => 'test__title']],
+        'url' => [[$this, 'extractUrl'], 'files', 0, '_id'],
+        'Creator' => [['value' => 'test__Creator']]
+      ],
+      "files" => [["_id"  => "test__file"]],
+      '_referenced' => [
+        'dcx:file' => ["test__file" => ['properties' => ['_file_url_absolute' => 'test__url']]],
+        'dcx:rights' => ["test__right" => ['properties' => ['topic_id' => ['_id' => 'dcxapi:tm_topic/rightsusage-Online']]]]
+      ],
+      '_rights_effective' => ['rightstype-UsagePermitted' => [[["_id" => "test__right"]]]],
+    ];
+
+    $asset = $this->client->getObject('document/xyz');
+    $this->assertInstanceOf('Drupal\dcx_integration\Asset\Image', $asset);
+  }
+
+  function testGetObject__article() {
+    $this->api_client->expected_response_body = [
+      '_id' => 'document/abc',
+      '_type' => 'dcx:document',
+      'fields' => [
+        'Type' => [0 => ['_id' => 'dcxapi:tm_topic/documenttype-story']],
+        'Headline' => [0 => ['value' => 'test__title',]],
+        'body' => [0 => ['value' => 'test__body']],
+      ],
+    ];
+    $asset = $this->client->getObject('document/abc');
+    $this->assertInstanceOf('Drupal\dcx_integration\Asset\Article', $asset);
+  }
+
+}
diff --git a/tests/src/Unit/AssetTest.php b/tests/src/Unit/AssetTest.php
new file mode 100644
index 0000000..506c364
--- /dev/null
+++ b/tests/src/Unit/AssetTest.php
@@ -0,0 +1,109 @@
+<?php
+
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+namespace Drupal\Tests\dcx_integration\Unit;
+
+use Drupal\dcx_integration\Asset\Image;
+use Drupal\dcx_integration\Asset\Article;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * Description of AssetTest
+ *
+ * @author go
+ */
+class AssetTest extends UnitTestCase {
+
+  function testCreateImage__mandatory_attr() {
+    $data = [];
+    foreach (Image::$mandatory_attributes as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+    $asset = new Image($data);
+
+    $this->assertArrayEquals($data, $asset->data(), "Mandatory attributes suffice to create an Image");
+  }
+
+  function testCreateImage__optional_attr() {
+    $data = [];
+    foreach (array_merge(Image::$mandatory_attributes, Image::$optional_attributes) as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+    $asset = new Image($data);
+
+    $this->assertArrayEquals($data, $asset->data(), "Mandatory and optional attributes are able to create an Image");
+  }
+
+  function testCreateImage__missing_mandatory() {
+    $data = [];
+    foreach (Image::$mandatory_attributes as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+    array_shift($data);
+
+    $this->setExpectedException('Drupal\dcx_integration\Exception\MandatoryAttributeException');
+    $asset = new Image($data);
+  }
+
+  function testCreateImage__stray_option() {
+    $invalid_attribute = 'invalid';
+    $this->assertTrue(!in_array($invalid_attribute, Image::$mandatory_attributes + Image::$optional_attributes), 'Invalid attribute in the list of mandatory or optional attributes.');
+
+    $data = [];
+    foreach (array_merge(Image::$mandatory_attributes, [$invalid_attribute])  as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+
+    $this->setExpectedException('Drupal\dcx_integration\Exception\IllegalAttributeException');
+    $asset = new Image($data);
+  }
+
+  function testCreateArticle__mandatory_attr() {
+    $data = [];
+    foreach (Article::$mandatory_attributes as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+    $asset = new Article($data);
+
+    $this->assertArrayEquals($data, $asset->data(), "Mandatory attributes suffice to create an Article");
+  }
+
+  function testCreateArticle__optional_attr() {
+    $data = [];
+    foreach (array_merge(Article::$mandatory_attributes, Article::$optional_attributes) as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+    $asset = new Article($data);
+
+    $this->assertArrayEquals($data, $asset->data(), "Mandatory and optional attributes are able to create an Article");
+  }
+
+  function testCreateArticle__missing_mandatory() {
+    $data = [];
+    foreach (Article::$mandatory_attributes as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+    array_shift($data);
+
+    $this->setExpectedException('Drupal\dcx_integration\Exception\MandatoryAttributeException');
+    $asset = new Article($data);
+  }
+
+  function testCreateArticle__stray_option() {
+    $invalid_attribute = 'invalid';
+    $this->assertTrue(!in_array($invalid_attribute, Article::$mandatory_attributes + Article::$optional_attributes), 'Invalid attribute in the list of mandatory or optional attributes.');
+
+    $data = [];
+    foreach (array_merge(Article::$mandatory_attributes, [$invalid_attribute])  as $attr) {
+      $data[$attr] = 'test__' . $attr;
+    }
+
+    $this->setExpectedException('Drupal\dcx_integration\Exception\IllegalAttributeException');
+    $asset = new Article($data);
+  }
+}
